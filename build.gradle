plugins {
    id "net.minecraftforge.gradle"
    id "org.parchmentmc.librarian.forgegradle"
    id "com.matthewprenger.cursegradle"
}

String semVersion = "${major_version}.${minor_version}.${patch_version}";

version = semVersion
group = 'com.austinmreppert.graphio'
archivesBaseName = 'graph-io'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            args "--username", "pie"

            property 'forge.logging.console.level', 'debug'

            mods {
                graphio {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                graphio {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'graphio', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                graphio {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Graph IO",
                "Specification-Vendor"    : "Austin M. Reppert",
                "Specification-Version"   : semVersion,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Austin M. Reppert",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

def expandTomlVars = tasks.register("expandTomlVars", Copy) {
    it.outputs.upToDateWhen { false }

    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': semVersion, 'loader_version': loader_version
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude("META-INF/mods.toml")
    configure { finalizedBy(expandTomlVars) }
}

classes.configure {
    dependsOn(expandTomlVars);
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_KEY") || ""
    project {
        id = '513951'
        addGameVersion(minecraft_version)
        changelog = 'changelog.md'
        changelogType = 'markdown'
        releaseType = 'alpha'
    }
}